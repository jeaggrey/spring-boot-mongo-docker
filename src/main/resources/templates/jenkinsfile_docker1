// Prequisites
// A server with Jenkins and Docker running on it (Jenkins user should be allowed to run Docker).
// Github account.
// Docker hub account.
// Install the Docker Pipelines plugin on Jenkins
// Install/Download kubernetets plugin https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbXotUUl5ZFptMmU0U3kxTHFNU3ZFcmFHTUdHUXxBQ3Jtc0tsV1FnajdpLWtkcWZlZ29fbUVLOW1kZzRsMXBTbjNUclNGSVNyYktTYkFEQzZrTm9KTXl5SDlaXzNMdWRfY0tvSjFyRDc1R1dScnlWcDIzblFjTHlLUDA2VklMN2liSWNYazR5eEFLcnhEaDNfeVJ1WQ&q=https%3A%2F%2Fupdates.jenkins.io%2Fdownload%2Fplugins%2Fkubernetes-cd%2F1.0.0%2Fkubernetes-cd.hpi&v=XE_mAhxZpwU
// Create Deployment 
// Docker Hub account details. Go to Credentials → Global → Add credentials  
// Note that if you set the ID, you will need this specific ID to refer this credential from your scripts. Here we are just using dockerhub_id.
// argocd GITOPS 

pipeline{
  environment {
    registry = "jeaggrey/joetech" //Replace with your registry 
    registryCredential = 'DockerHubCred' //Credential name in Jenkins for Dockerhub
    dockerImage = ''
  }
  agent any 
  tools {
    maven "maven3.8.6" //Pick Maven Version
  }  
  stages {
    stage('1GetCode'){
      steps{
        sh "echo 'cloning the latest application version' "
      //  git credentialsId: 'GithubCred', url: 'https://github.com/JoetechDev/jowebapp.git' //Use your own github account link
       git branch: 'main', credentialsId: 'GithubCred', url: 'https://github.com/JoetechDev/jowebapp'
    //  git 'https://github.com/JoetechDev/jowebapp'
      }
    }
    stage('3Test+Build'){
      steps{
        sh "echo 'running JUnit-test-cases' "
        sh "echo 'testing must passed to create artifacts ' "
        sh 'mvn clean package'
      }
    }
//   stage('4CodeQuality'){
//        steps{
//          sh "echo 'Perfoming CodeQualityAnalysis' "   //currently commented out
//          sh "mvn sonar:sonar"
//        }
//     }
//    stage('5uploadNexus'){
//       steps{
//         sh "mvn deploy"
//       }
//     } 

 stage('6BuildImage'){
      steps{

      script {
        dockerImage = docker.build registry + ":$BUILD_NUMBER" //use build number as image tag 
        //$BUILD_NUMBER variable is used as tag for docker image 
      }   
      sh "echo 'Building Docker Image' "
       
      }
    }
     stage('7PushImage'){
      steps{
      script {
        docker.withRegistry( '', registryCredential )
        {
        dockerImage.push()
       }  
      }  
        sh "echo 'Pushed  Docker Image'"
       }
    }
 stage('8Updating Manifest') {
       steps {
         script {
         echo "triggering updatemanifestjob"
                build job: 'manifestupd', parameters: [string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)] 
                // "manifestupd" name of second jenkins job that is triggered , second Job is parameterized and env.BUILD_NUMBER is inputed as parameter  DOCKERTAG  
         }
       }
     }

  }
}

  
